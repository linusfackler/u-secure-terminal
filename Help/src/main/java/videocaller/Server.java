package videocaller;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.swing.ImageIcon;


/**
 *
 * Server video caller, receives video input and outputs it on a screen
 * Server should be open before client to receive client input
 */
public class Server extends javax.swing.JFrame {

	// Uses port 8888 for Datagram protocol
    public static int audio_port = 8888;
	
    public static boolean calling = false;
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }
    
    // Format the audio and how it will sound to the client
    public static AudioFormat getaudioformat(){
        float sampleRate = 8000.0F;
        int sampleSizeInBits = 16;
        int channel = 2;
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat(sampleRate, sampleSizeInBits, channel, signed, bigEndian);
    }
    public static SourceDataLine audio_out;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        img_server = new javax.swing.JLabel();
        end_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        img_server.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        end_btn.setText("End call");
        end_btn.setMaximumSize(new java.awt.Dimension(72, 28));
        end_btn.setMinimumSize(new java.awt.Dimension(72, 28));
        end_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                end_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(img_server, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(end_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(img_server, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(end_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        end_btn.getAccessibleContext().setAccessibleDescription("63");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Ends call and exits system
    private void end_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_end_btnActionPerformed
        // TODO add your handling code here
        Server.calling = false;
        System.exit(0);
    }//GEN-LAST:event_end_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, ClassNotFoundException {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
        
        try (	//Connects to client at port 7800 (Should have same port to work)
        	ServerSocket server = new ServerSocket(7800)) {
			// Accepts the server call and receives video stream
			Socket s = server.accept();
			ObjectInputStream in = new ObjectInputStream(s.getInputStream());
			ImageIcon ic;
			init_audio();
			
			// Gets client image while session is open and outputs it into a screen
			while(true){
			    ic = (ImageIcon) in.readObject();
			    img_server.setIcon(ic);
			}
		} catch(java.net.SocketException | java.io.EOFException ex) {
			System.out.println("Connection ended by server");
		}
        
    }
    
    // Starts audio player 
    public static void init_audio(){
        try {
            // Formats the audio and gets audio input
            AudioFormat format = getaudioformat();
            DataLine.Info info_out = new DataLine.Info(SourceDataLine.class, format);
            // Exits if audio line is not supported
            if(!AudioSystem.isLineSupported(info_out)){
                System.out.println("Line not supported");
                System.exit(0);
            }
            // Starts audio call
            audio_out = (SourceDataLine) AudioSystem.getLine(info_out);
            audio_out.open(format);
            audio_out.start();
            // Sets up player thread to contact client
            player_thread p = new player_thread();
            p.din = new DatagramSocket(audio_port); 
            p.audio_out = audio_out;
            // Starts player thread and server call
            Server.calling = true;
            p.start();
        } catch (LineUnavailableException | SocketException ex ) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton end_btn;
    public static javax.swing.JLabel img_server;
    // End of variables declaration//GEN-END:variables
}
